{"version":3,"sources":["images/cloud.png","images/sun.png","images/rain.gif","images/snow.gif","images/thunder.gif","components/Today/Today.tsx","components/ForecastDay/ForecastDay.tsx","components/SevenDayForecast/SevenDayForecast.tsx","components/Spinner/Spinner.tsx","App.tsx","index.tsx"],"names":["Today","props","clouds","feels_like_current","humidity","temp_current","wind_speed","feels_like","temp","weather","city","country","rain","useState","image","setImage","useEffect","main","cloudImage","sunImage","thunderImage","rainImage","snowImage","className","max","min","morn","day","eve","night","src","alt","ForeCastDay","forecastDay","days","date","setDate","weekday","setWeekday","windSpeed","setWindSpeed","temperature","setTemperature","rainChance","setRainChance","setClouds","setHumidity","sunrise","setSunrise","sunset","setSunset","Date","dt","toLocaleDateString","getDay","toLocaleTimeString","replace","SevenDayForecast","forecastDaily","map","Spinner","App","isLoading","setIsLoading","Object","current","setCurrent","daily","setDaily","a","fetch","process","then","res","json","data","shift","catch","err","console","error","loadData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdadd2ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cloud.c9c98672.png\";","export default __webpack_public_path__ + \"static/media/sun.2f212242.png\";","export default __webpack_public_path__ + \"static/media/rain.6c234ab9.gif\";","export default __webpack_public_path__ + \"static/media/snow.58da4989.gif\";","export default __webpack_public_path__ + \"static/media/thunder.1fbd5af5.gif\";","import { useEffect, useState } from 'react';\n\nimport { IToday } from '../../interfaces/today';\n\nimport cloudImage from '../../images/cloud.png';\nimport sunImage from '../../images/sun.png';\nimport rainImage from '../../images/rain.gif';\nimport snowImage from '../../images/snow.gif';\nimport thunderImage from '../../images/thunder.gif';\nimport '../../styles/today.css';\n\n\nexport default function Today(props: IToday) {\n    const { clouds, feels_like_current, humidity, temp_current, wind_speed, feels_like, temp, weather, city, country, rain } = props;\n\n    const [image, setImage] = useState<string>('');\n\n    useEffect(() => {\n        switch (weather[0].main) {\n            case 'Clouds':\n                setImage(cloudImage);\n                break;\n            case 'Clear':\n                setImage(sunImage);\n                break;\n            case 'Thunderstorm':\n                setImage(thunderImage);\n                break;\n            case 'Drizzle':\n                setImage(rainImage);\n                break;\n            case 'Rain':\n                setImage(rainImage);\n                break;\n            case 'Snow':\n                setImage(snowImage);\n                break;\n            default:\n                setImage(cloudImage);\n                break;\n        };\n    }, []);\n\n\n    return (\n        <section className='today-wrapper'>\n            <section className='information-container'>\n                <article className='location-container today-container'>\n                    <p className='location-country'>{country}</p>\n                    <p className='location-city'>{city}</p>\n                </article>\n                <section className='weather-container'>\n                    <article className='weather-container__left today-container'>\n                        {rain ? <p className='rain-chance'>{rain} %</p> : null}\n                        <p className='wind-speed'>{wind_speed} m/s</p>\n                        <p className='clouds'>{clouds} %</p>\n                        <p className='humidity'>{humidity} %</p>\n                    </article>\n                    <article className='weather-container__right today-container'>\n                        <p className='current-temperature'>{temp_current}</p>\n                        <p className='feels-like'>feels like {feels_like_current}</p>\n                        <p className='max-temperature temperature-range'>{temp.max}</p>\n                        <p className='min-temperature temperature-range'>{temp.min}</p>\n                    </article>\n                </section>\n                <section className='temperature-container'>\n                    <article className='temperature-trend today-container'>\n                        <p className='label'>Temperature</p>\n                        <p>{temp.morn}</p>\n                        <p>{temp.day}</p>\n                        <p>{temp.eve}</p>\n                        <p>{temp.night}</p>\n                    </article>\n                    <article className='temperature-trend today-container'>\n                        <p className='label'>Feels like</p>\n                        <p>{feels_like.morn}</p>\n                        <p>{feels_like.day}</p>\n                        <p>{feels_like.eve}</p>\n                        <p>{feels_like.night}</p>\n                    </article>\n                </section>\n            </section>\n            <figure className='image-container'>\n                <img className='image' src={image} alt={`${image}`} />\n            </figure>\n        </section >\n    );\n}","import { useEffect, useState } from 'react';\n\nimport { IForecastDay } from '../../interfaces/forecastDay';\n\nimport '../../styles/forecastDay.css';\n\ninterface props {\n    forecastDay: IForecastDay,\n}\n\n\nexport default function ForeCastDay(props: props) {\n    const { forecastDay } = props;\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\n    const [date, setDate] = useState<string>('');\n    const [weekday, setWeekday] = useState<string>('');\n    const [windSpeed, setWindSpeed] = useState<number>();\n    const [temperature, setTemperature] = useState<number>();\n    const [rainChance, setRainChance] = useState<number>();\n    const [clouds, setClouds] = useState<number>();\n    const [humidity, setHumidity] = useState<number>();\n    const [sunrise, setSunrise] = useState<string>();\n    const [sunset, setSunset] = useState<string>();\n\n\n    useEffect(() => {\n        setDate(new Date(forecastDay.dt * 1000).toLocaleDateString('de-DE'));\n        if ((new Date(forecastDay.dt * 1000).getDay()) !== 0) {\n            setWeekday(days[(new Date(forecastDay.dt * 1000).getDay()) - 1]);\n        } else {\n            setWeekday(days[6]);\n        };\n        setWindSpeed(forecastDay.wind_speed);\n        setClouds(forecastDay.clouds);\n        setHumidity(forecastDay.humidity);\n        setRainChance(forecastDay.rain);\n        setSunrise(new Date(forecastDay.sunrise * 1000).toLocaleTimeString('de-DE').replace(/(:\\d{2}| [AP]M)$/, \"\"));\n        setSunset(new Date(forecastDay.sunset * 1000).toLocaleTimeString('de-DE').replace(/(:\\d{2}| [AP]M)$/, \"\"));\n        setTemperature(forecastDay.temp.day);\n    }, []);\n\n\n    return (\n        <article className='forecast-day-wrapper'>\n            <p className='weekday'>{weekday}</p>\n            <p className='date'>{date}</p>\n            <p className='value temperature'>{temperature}</p>\n            {rainChance ? <p className='value rain-chance'>{rainChance} %</p> : null}\n            <p className='value wind-speed'>{windSpeed} m/s</p>\n            <p className='value clouds'>{clouds} %</p>\n            <p className='value humidity'>{humidity} %</p>\n            <p className='value sunrise'>{sunrise} h</p>\n            <p className='value sunset'>{sunset} h</p>\n        </article>\n    );\n}","import ForecastDay from '../ForecastDay/ForecastDay';\n\nimport { IForecastDay } from '../../interfaces/forecastDay';\n\nimport '../../styles/sevenDayForecast.css';\n\ninterface props {\n    forecastDaily: IForecastDay[],\n}\n\n\nexport default function SevenDayForecast(props: props) {\n    const { forecastDaily } = props;\n\n\n    return (\n        <section className='seven-day-forecast-wrapper'>\n            {\n                forecastDaily.map((day) => (\n                    <ForecastDay\n                        key={day.dt}\n                        forecastDay={day}\n                    />\n                ))\n            }\n        </section>\n    );\n}","export default function Spinner() {\n    return (\n        <div className='spinner'></div>\n    );\n}","import { useEffect, useState } from 'react';\n\nimport Today from './components/Today/Today';\nimport SevenDayForecast from './components/SevenDayForecast/SevenDayForecast';\nimport Spinner from './components/Spinner/Spinner';\n\nimport { ICurrent } from './interfaces/current';\nimport { IForecastDay } from './interfaces/forecastDay';\n\n\nexport default function App() {\n  const BASE_URL = process.env.REACT_APP_BASE_URL;\n  const LATITUDE = process.env.REACT_APP_LATITUDE;\n  const LONGITUDE = process.env.REACT_APP_LONGITUDE;\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const UNITS = process.env.REACT_APP_UNITS;\n\n  const locationName: string = 'Hamburg';\n  const countryName: string = 'Germany';\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [current, setCurrent] = useState<ICurrent>(Object);\n  const [daily, setDaily] = useState<IForecastDay[]>([]);\n\n\n  useEffect(() => {\n    const exclude = 'hourly,minutely';\n\n    const loadData = async () => {\n      await fetch(`${BASE_URL}?lat=${LATITUDE}&lon=${LONGITUDE}&exclude=${exclude}&appid=${API_KEY}&units=${UNITS}`)\n        .then(res => res.json())\n        .then(data => {\n          setCurrent(data.current);\n          data.daily.shift();\n          setDaily(data.daily);\n        })\n        .catch(err => console.error(err));\n\n      setIsLoading(false);\n    };\n\n    loadData();\n  }, []);\n\n\n  return (\n    <>\n      {\n        isLoading\n          ?\n          <Spinner />\n          :\n          <>\n            <Today\n              clouds={current.clouds}\n              feels_like_current={current.feels_like}\n              humidity={current.humidity}\n              temp_current={current.temp}\n              wind_speed={current.wind_speed}\n              feels_like={daily[0].feels_like}\n              temp={daily[0].temp}\n              weather={current.weather}\n              city={locationName}\n              country={countryName}\n              rain={current.rain}\n            />\n            <SevenDayForecast\n              forecastDaily={daily}\n            />\n          </>\n\n      }\n    </>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}